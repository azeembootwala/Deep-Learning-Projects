Timer unit: 1e-06 s

Total time: 11.9846 s
File: <ipython-input-86-67fbd1091ecd>
Function: main at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def main():
     3         1         8724   8724.0      0.1      X,Y = get_data(True) # We will first get the data
     4         1            6      6.0      0.0      X_train=X[:600,:]
     5         1            3      3.0      0.0      Y_train =Y[:600]     #and split the data into test and training samples
     6         1            4      4.0      0.0      X_test = X[600:,:]
     7         1            3      3.0      0.0      Y_test = Y[600:]
     8                                           
     9                                               # We will first convert the target into indicator matrix
    10         1         1036   1036.0      0.0      ind = tar2ind(Y_train)
    11         1            4      4.0      0.0      N,D = X_train.shape # Initializing number of samples & Dimentionality
    12         1            2      2.0      0.0      M = 30 # our hidden layer size
    13         1            2      2.0      0.0      _,K = ind.shape # output layer size
    14                                           
    15                                               #Initializing our weight matrix
    16         1          135    135.0      0.0      W1 = np.random.randn(D,M)/np.sqrt(D)
    17         1           15     15.0      0.0      b1 = np.random.randn(M)
    18         1           30     30.0      0.0      W2 = np.random.randn(M,K)/np.sqrt(M)
    19         1            9      9.0      0.0      b2 = np.random.randn(K)
    20         1            2      2.0      0.0      learning_rate = 10e-5
    21         1            2      2.0      0.0      cost = []
    22         1          252    252.0      0.0      print("Training...")
    23                                           
    24                                               # Now that all ingredients for the soup is ready , lets start with feed forward
    25     10001        12385      1.2      0.1      for i in range(0,10000):
    26                                                   
    27                                           
    28     10000      8407069    840.7     70.1          output,Z = forward(X_train,W1,b1,W2,b2)
    29                                                   #Performing backpropagation now
    30     10000       446910     44.7      3.7          W2 = W2 + learning_rate * (Z.T.dot(ind-output))
    31     10000       323338     32.3      2.7          b2 = b2 + learning_rate *((ind-output).sum(axis = 0))
    32                                                   #dz = (ind-output).dot(W2.T)*Z*(1-Z)
    33     10000       879787     88.0      7.3          dz = (ind-output).dot(W2.T)*(1-Z*Z) #For tanh
    34                                                   #dz = (ind-output).dot(W2.T)*(Z>0)#For relu
    35     10000       436724     43.7      3.6          W1 = W1 + learning_rate * (X_train.T.dot(dz))
    36     10000       379610     38.0      3.2          b1 = b1+ learning_rate*(dz.sum(axis = 0 ))
    37     10000       789188     78.9      6.6          c = cross_entropy(output,ind)
    38     10000        21814      2.2      0.2          cost.append(c)
    39                                           
    40     10000        18806      1.9      0.2          if i%500 ==0:
    41                                           
    42                                           
    43                                           
    44        20          541     27.1      0.0              Y_pred = np.argmax(output,axis=1)
    45                                           
    46        20         1798     89.9      0.0              r = classification_rate(Y_pred,Y_train)
    47        20        23006   1150.3      0.2              print("iteration:",i,"cost",c,"classification_rate:",r)
    48         1        88793  88793.0      0.7      plt.plot(cost)
    49         1           52     52.0      0.0      plt.ylabel("cost")
    50         1           58     58.0      0.0      plt.xlabel("iterations")
    51         1       143006 143006.0      1.2      plt.show()
    52         1          719    719.0      0.0      Y_test_mat,_ = forward(X_test,W1,b1,W2,b2)
    53         1           23     23.0      0.0      Y_test_pred = np.argmax(Y_test_mat,axis=1)
    54         1          100    100.0      0.0      result = classification_rate(Y_test_pred,Y_test)
    55         1          691    691.0      0.0      print("Classification rate of test data is : ",result)